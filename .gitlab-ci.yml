
stages:          # List of stages for jobs, and their order of execution
  - prepare
  - build
  - test
  - package
  - build-infra
  - config-infra
  - deploy

services:
  - docker:24.0.5-dind

variables: 
  CI_IMAGE_TEST: $CI_COMMIT_SHA
  CI_IMAGE_PROD: $CI_COMMIT_TAG
  AZURE_CLIENT_ID: $CI_ARM_CLIENT_ID
  AZURE_CLIENT_SECRET: $CI_ARM_CLIENT_SECRET
  AZURE_TENANT_ID: $CI_ARM_TENANT_ID
  AZURE_SUBSCRIPTION_ID: $CI_ARM_SUBSCRIPTION_ID

prepare-test-env:
  environment: test
  stage: prepare
  script: 
    - echo "start preparing env test vars"
    - echo "
      export CI_IMAGE_VER=$CI_IMAGE_TEST;   
      export CI_ENV=$CI_ENVIRONMENT_NAME;" >> shared-vars.sh
  artifacts: 
    paths:
      - shared-vars.sh
  only: 
    - Development

prepare-staging-env:
  environment: staging
  stage: prepare
  script:
    - echo "start preparing env staging vars"
    - echo "
      export CI_IMAGE_VER=$CI_IMAGE_TEST;
      export CI_ENV=$CI_ENVIRONMENT_NAME;" >> shared-vars.sh
  artifacts:
    paths:
      - shared-vars.sh
  only:
    - main

prepare-production-env:
  environment: production
  stage: prepare
  script:
    - echo "start preparing env production vars"
    - echo "
      export CI_IMAGE_VER=$CI_IMAGE_PROD;
      export CI_ENV=$CI_ENVIRONMENT_NAME;" >> shared-vars.sh
  artifacts:
    paths:
      - shared-vars.sh
  only:
    - tags

build-dotnet-code:       # Build worker code.
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:7.0
  variables:
    NUGET_PACKAGES: "/builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/worker/.nuget/packages"   # Change nuget packages path 
  cache:
    key: ${CI_COMMIT_REF_SLUG}            # Isolated cache for each branch
    paths:
      - worker/.nuget/packages/**         # Save restored packages (Nuget)
  script:
    - echo "Compiling the code..."
    - cd worker
    - dotnet restore
    - dotnet publish -c Release -o publish --self-contained false
    - echo "Compile complete."
  artifacts:
    paths:
      - worker/publish/
  only:
    - Development
    - main
    - tags

test-dontnet-code:   # Test worker code.
  stage: test        # It only starts when the job in the build stage completes successfully.
  image: mcr.microsoft.com/dotnet/sdk:7.0
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - cd worker
    - dotnet test  --logger "trx;LogFileName=TestResults/Dotnet-TestResults_$(date +%s).trx"      # Test the code and save the testing results.
  only:
    - Development
    - main
    - tags

test-flask-code:   # Test vote code.
  stage: test      
  image: python:3.11-slim
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - cd vote
    - pip install -r requirements.txt
    - pip install flake8 pytest
    - PYTHONPATH=. pytest tests/
    - flake8 .
  only:
    - Development
    - main
    - tags

test-nodejs-code:   # Test result code.
  stage: test  
  image: node:18
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - cd result
    - npm install --save-dev jest supertest
    - npm test 
  only:
    - Development
    - main
    - tags

package-dotnet-code:       # Dockerizing worker app .
  stage: package
  image: docker:24.0.5
  before_script: 
    - source shared-vars.sh
  script:
    - echo "Packaging the code..."
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/worker:$CI_IMAGE_VER ./worker
    - docker push $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/worker:$CI_IMAGE_VER
    - echo "Your package is ready."
  only:
    - Development
    - main
    - tags

package-flask-code:       # Dockerizing vote app .
  stage: package
  image: docker:24.0.5
  before_script: 
    - source shared-vars.sh
  script:
    - echo "Packaging the code..."
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/vote:$CI_IMAGE_VER ./vote
    - docker push $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/vote:$CI_IMAGE_VER
    - echo "Your package is ready."
  only:
    - Development
    - main
    - tags

package-nodejs-code:       # Dockerizing result app .
  stage: package
  image: docker:24.0.5
  before_script: 
    - source shared-vars.sh
  script:
    - echo "Packaging the code..."
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - docker build -t $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/result:$CI_IMAGE_VER ./result
    - docker push $CI_REGISTRY/depi9980437/voting-app/$CI_ENV/result:$CI_IMAGE_VER
    - echo "Your package is ready."
  only:
    - Development
    - main
    - tags

terraform-build-infra:
  image: zenika/terraform-azure-cli:latest
  stage: build-infra
  script:
    - echo "Logging in to Azure..."
    - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
    - az account set -s $CI_ARM_SUBSCRIPTION_ID
    - cd ./Terraform
    - sh ./Build-Infra.sh
  cache: 
    paths:
      - ./Terraform/.terraform
      - ./Terraform/.terraform.lock.hcl
      - ./Terraform/terraform.tfstate
  artifacts: 
    paths:
      - ./Terraform/terraform-output.json
  only:
    - Development
    - main
    - tags

ansible-config-infra:
  stage: config-infra
  image: ghcr.io/ansible-community/community-ee-base:latest
  script:
    - echo "config infra machines"
    - cd ./ansible-config
    - echo "$CI_VM_SSH_PRIVATE_KEY" >> gitlab_rsa
    - sh ./config-infra.sh
  artifacts:
    paths:
      - ./ansible-config/inventory.ini
      - ./ansible-config/minikube-playbook-output.txt
  only:
    - Development
    - main
    - tags

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  only:
    - Development
    - main
    - tags
